# @format

openapi: 3.0.3
info:
  title: Twitter clone TypeScript 2024
  description: |-
    **This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
    . In the third iteration of the pet store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_

    Some useful links:
    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:4000
tags:
  - name: users
    description: Các API liên quan tới Users

paths:
  /api/users/login:
    post:
      tags:
        - users
      summary: Đăng nhập
      description: Đăng nhập vào hệ thống
      operationId: login
      requestBody:
        description: Thông tin đăng nhập
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginBody"
        required: true
      responses:
        "200":
          description: Đăng nhập thành công
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Login success
                  result:
                    $ref: "#/components/schemas/SuccessAuthentication"
        "422":
          description: Invalid input
  /api/users/me:
    get:
      tags:
        - users
      summary: Lấy thông tin user
      description: Lấy thông tin user
      operationId: getMe
      security:
        - BearerAuth: []
      responses:
        default:
          description: Lấy thông tin user thành công
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Get my profile success
                  result:
                    $ref: "#/components/schemas/UserProfile"
components:
  schemas:
    LoginBody:
      type: object
      properties:
        email:
          type: string
          example: tranbaoanh@gmail.com
        password:
          type: string
          example: Baoanh123
    UserProfile:
      type: object
      properties:
        _id:
          type: string
          format: MongoId
          example: 65d9a97ed5fdd26fc42ebe3f
        name:
          type: string
          example: BaoAnh
        email:
          type: string
          format: email
          example: tranbaoanh@gmail.com
        dateofbirth:
          type: string
          format: ISO8601
          example: 2023-08-07T14:06:06.059Z
        created_at:
          type: string
          format: ISO8601
          example: 2024-02-24T08:31:59.006Z
        updated_at:
          type: string
          format: ISO8601
          example: 2024-02-24T08:31:59.006Z
        verify:
          $ref: "#/components/schemas/UserVerifyStatus"
        twitter_circle:
          type: array
          items:
            type: string
            format: MongoId
          example: ["65d9a97ed5fdd26fc42ebe3f", "65d9a97ed5fdd26fc42ebe42"]
        bio:
          type: string
          example: This is my bio
        location:
          type: string
          example: "TpHCM"
        website:
          type: string
          example: "example.com"
        username:
          type: string
          example: "John"
        avatar:
          type: string
          example: "http:localhost:4000/images/avatar/john.jpg"
        cover_photo:
          type: string
          example: "http:localhost:4000/images/avatar/john.jpg"
    UserVerifyStatus:
      type: number
      enum: [Unverified, Verified, Banned]
      example: 1
    SuccessAuthentication:
      type: object
      properties:
        accessToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjVkOWE5N2VkNWZkZDI2ZmM0MmViZTNmIiwidG9rZW5fdHlwZSI6MCwidmVyaWZ5IjowLCJpYXQiOjE3MTAwNTgxNjcsImV4cCI6MTcxMDE0NDU2N30.jJlZUlDsxvt3SxvlZNEbedTnOiJLhOaRkobg7N0tz_I
        refreshToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjVkOWE5N2VkNWZkZDI2ZmM0MmViZTNmIiwidG9rZW5fdHlwZSI6MSwidmVyaWZ5IjowLCJpYXQiOjE3MTAwNTgxNjcsImV4cCI6MTcxMjY1MDE2N30.DMv93C7ohpdwoAvmHyFfXyaE3a3b97EMWNmouvZCICQ
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
